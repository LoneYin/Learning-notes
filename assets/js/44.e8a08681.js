(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{243:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"一些js面试题整理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一些js面试题整理"}},[t._v("#")]),t._v(" 一些JS面试题整理")]),t._v(" "),s("h2",{attrs:{id:"q1：输出以下代码的执行结果并解释为什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#q1：输出以下代码的执行结果并解释为什么"}},[t._v("#")]),t._v(" Q1：输出以下代码的执行结果并解释为什么")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\na"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// --\x3e undefined")]),t._v("\nb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// --\x3e {n: 2}")]),t._v("\n")])])]),s("h3",{attrs:{id:"解析："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解析："}},[t._v("#")]),t._v(" 解析：")]),t._v(" "),s("p",[s("strong",[t._v("运算符优先级和连续赋值带来的坑")])]),t._v(" "),s("p",[t._v("首先，"),s("code",[t._v("a")]),t._v("和"),s("code",[t._v("b")]),t._v("同时引用了"),s("code",[t._v("{n:2}")]),t._v("对象，接着执行到"),s("code",[t._v("a.x = a = {n：2}")]),t._v("语句，尽管赋值是从右到左的没错，但是"),s("code",[t._v(".")]),t._v("的优先级比"),s("code",[t._v("=")]),t._v("要高，所以这里首先执行"),s("code",[t._v("a.x")]),t._v("，相当于为"),s("code",[t._v("a")]),t._v("（或者"),s("code",[t._v("b")]),t._v("）所指向的"),s("code",[t._v("{n:1}")]),t._v("对象新增了一个属性x，即此时对象将变为"),s("code",[t._v("{n:1;x:undefined}")]),t._v("。")]),t._v(" "),s("p",[t._v("之后按正常情况，从右到左进行赋值，此时执行"),s("code",[t._v("a ={n:2}")]),t._v("的时候，"),s("code",[t._v("a")]),t._v("的引用改变，指向了新对象"),s("code",[t._v("{n：2}")]),t._v(",而"),s("code",[t._v("b")]),t._v("依然指向的是旧对象。之后执行"),s("code",[t._v("a.x = {n：2}")]),t._v("的时候，并不会重新解析一遍"),s("code",[t._v("a")]),t._v("，而是沿用最初解析"),s("code",[t._v("a.x")]),t._v("时候的"),s("code",[t._v("a")]),t._v("，也即旧对象，故此时旧对象的"),s("code",[t._v("x")]),t._v("的值为"),s("code",[t._v("{n：2}")]),t._v("，旧对象为 "),s("code",[t._v("{n:1;x:{n：2}}")]),t._v("，它被"),s("code",[t._v("b")]),t._v("引用着。")]),t._v(" "),s("p",[t._v("后面输出"),s("code",[t._v("a.x")]),t._v("的时候，又要解析"),s("code",[t._v("a")]),t._v("了，此时的"),s("code",[t._v("a")]),t._v("是指向新对象的"),s("code",[t._v("a")]),t._v("，而这个新对象是没有"),s("code",[t._v("x")]),t._v("属性的，故访问时输出"),s("code",[t._v("undefined")]),t._v("；而访问"),s("code",[t._v("b.x")]),t._v("的时候，将输出旧对象的"),s("code",[t._v("x")]),t._v("的值，即"),s("code",[t._v("{n:2}")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"q2：数组扁平化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#q2：数组扁平化"}},[t._v("#")]),t._v(" Q2：数组扁平化")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [[1,2,2],[3, 4, 5, 5],[6, 7, 8, 9,[11,12,[12,13,[14]]]],10]  ------\x3e   [1,2,2,3,4,5,5,6,7,8,9,11,12,12,13,14,10]")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 递归法  可使用reduce map for循环等实现")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// reduce")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("flatten")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("reduce")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("total"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" item")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" total"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("concat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isArray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("flatten")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// map")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("flatten")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("concat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" Array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isArray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("flatten")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// for")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("flatten")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" item "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isArray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("flatten")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 转字符串法 不过只适用于纯数字数组")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("flatten")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("','")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"q3：-1-2-3-map-parseint-返回结果"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#q3：-1-2-3-map-parseint-返回结果"}},[t._v("#")]),t._v(" Q3：['1', '2', '3'].map(parseInt) 返回结果")]),t._v(" "),s("h3",{attrs:{id:"arrray-map"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arrray-map"}},[t._v("#")]),t._v(" Arrray.map")]),t._v(" "),s("p",[s("code",[t._v("Array.map")]),t._v("方法会遍历原数组中的每个元素并执行"),s("code",[t._v("callback")]),t._v("，返回一个新的数组")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("callback")]),t._v("的第一个参数是"),s("code",[t._v("currentValue")]),t._v("，也就是原数组中正在处理的当前元素")]),t._v(" "),s("li",[s("code",[t._v("callback")]),t._v("的第二个参数是"),s("code",[t._v("index")]),t._v("，是原数组中正在处理的当前元素的索引")])]),t._v(" "),s("h3",{attrs:{id:"parseint"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parseint"}},[t._v("#")]),t._v(" parseInt")]),t._v(" "),s("p",[s("code",[t._v("parseInt")]),t._v("方法解析一个字符串参数，并返回一个指定基数（进制）的整数")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("parseInt")]),t._v("的第一个参数是"),s("code",[t._v("string")]),t._v("，也就是要被解析的字符串的值")]),t._v(" "),s("li",[s("code",[t._v("parseInt")]),t._v("得第二个参数是"),s("code",[t._v("radix")]),t._v("，一个介于2和36之间的整数，默认为10，代表解析字符串的基数（进制数）")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parseInt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("等同于")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("即返回值分别为")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//radix为0时，且string参数不以“0x”和“0”开头时，按照10为基数处理。这个时候返回1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//基数为1（1进制）表示的数中，最大值小于2，所以无法解析，返回NaN")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//基数为2（2进制）表示的数中，最大值小于3，所以无法解析，返回NaN")]),t._v("\n")])])]),s("p",[t._v("所以")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parseInt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1, NaN, NaN")]),t._v("\n")])])]),s("h2",{attrs:{id:"q4："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#q4："}},[t._v("#")]),t._v(" Q4：[] == ![]")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),s("h3",{attrs:{id:"解析：-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解析：-2"}},[t._v("#")]),t._v(" 解析：")]),t._v(" "),s("p",[s("code",[t._v("==")]),t._v(" 运算符，"),s("code",[t._v("javascript")]),t._v("语言灵活性的代表但也是最臭名昭著的黑魔法之一，比较运算之中发生的隐式类型转化不知坑了多少JSer。")]),t._v(" "),s("p",[t._v("我们先来列举一下"),s("code",[t._v("==")]),t._v("（相等运算符）的运算规则")]),t._v(" "),s("ul",[s("li",[t._v("如果两个值类型相同，进行 "),s("code",[t._v("====")]),t._v(" （严格相等运算符） 比较")]),t._v(" "),s("li",[t._v("如果两个值类型不同，它们可能是相等的，此时根据下列规则进行类型转换后比较:\n"),s("ol",[s("li",[t._v("如果一个值为"),s("code",[t._v("null")]),t._v("，另一个是"),s("code",[t._v("undefined")]),t._v("，那么"),s("strong",[t._v("相等")])]),t._v(" "),s("li",[t._v("如果一个值是"),s("code",[t._v("String")]),t._v("，另一个是"),s("code",[t._v("Number")]),t._v("，在比较之前要先将"),s("code",[t._v("String")]),t._v("转换为"),s("code",[t._v("Number")]),t._v("，即调用"),s("code",[t._v("Number()")]),t._v("方法")]),t._v(" "),s("li",[t._v("如果一个值是"),s("code",[t._v("Boolean")]),t._v("，则先将这个"),s("code",[t._v("Boolean")]),t._v("转换为数值后再进行比较，即调用"),s("code",[t._v("Number()")]),t._v("方法")]),t._v(" "),s("li",[t._v("如果一个值是"),s("code",[t._v("Object")]),t._v("，另一个是"),s("code",[t._v("String")]),t._v("或"),s("code",[t._v("Number")]),t._v("，则先将对象转换为基本数据类型再比较，即调用"),s("code",[t._v("javascript")]),t._v("内置类的"),s("code",[t._v("valueOf")]),t._v("或"),s("code",[t._v("toString")]),t._v("方法，"),s("code",[t._v("valueOf")]),t._v("会先于"),s("code",[t._v("toString")]),t._v("，例外的是"),s("code",[t._v("Date")]),t._v("对象，会直接用"),s("code",[t._v("toString")]),t._v("转换")])])])]),t._v(" "),s("p",[t._v("接下来我们分析一下"),s("code",[t._v("[] == ![]")]),t._v("为什么返回"),s("code",[t._v("true")])]),t._v(" "),s("ol",[s("li",[t._v("首先运算符右边的"),s("code",[t._v("![]")]),t._v("会先进行运算，得到"),s("code",[t._v("false")]),t._v("，即"),s("code",[t._v("[] == false")])]),t._v(" "),s("li",[t._v("当等式两边有"),s("code",[t._v("Boolean")]),t._v("值得时候会先对其进行类型转换，即"),s("code",[t._v("Number(false) = 0")]),t._v("，等式两边变为"),s("code",[t._v("[] == 0")])]),t._v(" "),s("li",[t._v("当等式两边一个值为"),s("code",[t._v("Object")]),t._v("另一个为"),s("code",[t._v("Number")]),t._v("时，将"),s("code",[t._v("Object")]),t._v("进行类型转换，即"),s("code",[t._v("[].valueOf()")]),t._v("，发现返回的结果"),s("code",[t._v("[]")]),t._v("仍是"),s("code",[t._v("Object")]),t._v("，所以再调用"),s("code",[t._v("[].toString()")]),t._v("得到"),s("code",[t._v("''")]),t._v("，"),s("code",[t._v("Number('')")]),t._v("得到"),s("code",[t._v("0")])]),t._v(" "),s("li",[s("code",[t._v("0 == 0")]),t._v(" 成立， 返回"),s("code",[t._v("true")])])]),t._v(" "),s("h2",{attrs:{id:"q5-react中setstate在什么情况下是同步的？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#q5-react中setstate在什么情况下是同步的？"}},[t._v("#")]),t._v(" Q5: React中setState在什么情况下是同步的？")]),t._v(" "),s("p",[t._v("在 React 中，如果是在 React 引发的事件处理方法（比如通过 onClick 引发的事件处理）或在生命周期中调用 setState 不会同步更新 this.state 。除此之外的 setState 调用会同步执行this.state。所谓"),s("strong",[t._v("除此之外")]),t._v("，指的是绕过 React 通过 addEventListener 直接添加的事件处理函数，还有通过 setTimeout/setInterval 产生的异步调用。")]),t._v(" "),s("blockquote",[s("p",[t._v("出于性能考虑，React 可能会把多个 setState() 调用合并成一个调用。  —— "),s("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/state-and-lifecycle.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方文档"),s("OutboundLink")],1)])]),t._v(" "),s("blockquote",[s("p",[t._v("setState 的"),s("strong",[t._v("异步")]),t._v("并不是说内部由异步代码实现，其实本身执行的过程和代码都是同步的，只是合成事件和生命周期钩子函数的调用顺序在更新之前（当前组件会添加_pendingStateQueue属性并被放入dirtyComponents中等待稍后更新）。导致在合成事件和钩子函数中没法立马拿到更新后的值，形式了所谓的“异步”，当然可以通过第二个参数 setState(partialState, callback) 中的callback拿到更新后的结果。")])]),t._v(" "),s("blockquote",[s("p",[t._v("setState 的批量更新优化也是建立在"),s("strong",[t._v("异步")]),t._v("（合成事件、钩子函数）之上的，在原生事件和 setTimeout 中不会批量更新，在"),s("strong",[t._v("异步")]),t._v("中如果对同一个值进行多次 setState ， setState 的批量更新策略会对其进行覆盖，取最后一次的执行，如果是同时 setState 多个不同的值，在更新时会对其进行合并批量更新。")])]),t._v(" "),s("p",[t._v("关于setState的具体内容详见大佬的文章"),s("a",{attrs:{href:"https://juejin.im/post/5b45c57c51882519790c7441",target:"_blank",rel:"noopener noreferrer"}},[t._v("《你真的理解setState吗？》"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"q6-function-prototype-function-prototype"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#q6-function-prototype-function-prototype"}},[t._v("#")]),t._v(" Q6: Function[[prototype]] === Function.prototype?")]),t._v(" "),s("p",[t._v("是对的  因为 Function 也是一个函数，它的__proto__指向 Function 构造函数的原型，很扯")]),t._v(" "),s("p",[t._v("应该是现有 Function.prototype 然后有的 function Function()")]),t._v(" "),s("h2",{attrs:{id:"q7-为什么react的事件handler需要手动绑定this"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#q7-为什么react的事件handler需要手动绑定this"}},[t._v("#")]),t._v(" Q7: 为什么React的事件handler需要手动绑定this?")]),t._v(" "),s("p",[t._v("相对于其他框架来说，react使用了合成事件（SyntheticEvent）来标准化浏览器的事件。")]),t._v(" "),s("p",[t._v("合成事件是一种顶层代理机制，这种代理机制作用的结果是：")]),t._v(" "),s("blockquote",[s("p",[t._v("事件依然在真实的dom节点上触发，之后会冒泡一路到document的节点，然后开始分发document节点收集到的事件，这个时候react从事件触发的组件实例开始， 遍历虚拟dom树，从树上取下我们绑定的事件，收集起来，然后执行。")])]),t._v(" "),s("p",[t._v("举个例子：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("React"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Component")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("fatherHandler")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("father")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*...*/")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("childHander")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("child")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*...*/")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n   "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("div onClick"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fatherHandler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("span onClick"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("childHander"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("span"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("当事件触发以后react会把上面的事件处理函数放到一个数组里是这样的")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("father"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" child"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("最后，react只要遍历执行这个数组，就能执行所有需要执行的事件处理函数。哈哈，想必眼尖的同学已经看出问题了，之前我们对函数进行了临时保存(简单粗暴的把事件处理函数赋值给了onClick属性)，这个时候执行的话，this自然就丢失了。有的同学也说了这其实不是react的锅，是js本身的问题。但是如果react保存顺便保存一下实例，还是可以做到，不需要你绑定this的，但是这样对于react来说代价太大了。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("instance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" father"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("instance，child"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("h2",{attrs:{id:"q8-js函数的参数是如何传递的？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#q8-js函数的参数是如何传递的？"}},[t._v("#")]),t._v(" Q8: js函数的参数是如何传递的？")]),t._v(" "),s("blockquote",[s("p",[t._v("ECMAScript中所有函数的参数都是按值传递的。也就是说，把函数外部的值复制给函数内部的参数，就和把值从一个变量复制到另一个变量一样。")])]),t._v(" "),s("p",[t._v("参数如果是基本类型是按值传递，如果是引用类型按共享传递。共享传递是指，在传递对象的时候，传递对象的引用的副本。")]),t._v(" "),s("p",[s("strong",[t._v("注意： 按引用传递是传递对象的引用，而按共享传递是传递对象的"),s("code",[t._v("引用的副本")]),t._v("！")])]),t._v(" "),s("p",[t._v("也就是说，你在函数内部直接修改作为参数传进来的对象的引用，是不会影响到原对象的引用的，但是你在没有改引用的状态下更改了对象某个属性的值，原对象也会变化")]),t._v(" "),s("h2",{attrs:{id:"q9-object-is-判断原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#q9-object-is-判断原理"}},[t._v("#")]),t._v(" Q9: Object.is 判断原理")]),t._v(" "),s("p",[t._v("Object.is() 判断两个值是否相同。如果下列任何一项成立，则两个值相同：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("两个值都是 undefined")])]),t._v(" "),s("li",[s("p",[t._v("两个值都是 null")])]),t._v(" "),s("li",[s("p",[t._v("两个值都是 true 或者都是 false")])]),t._v(" "),s("li",[s("p",[t._v("两个值是由相同个数的字符按照相同的顺序组成的字符串")])]),t._v(" "),s("li",[s("p",[t._v("两个值指向同一个对象")])]),t._v(" "),s("li",[s("p",[t._v("两个值都是数字并且")]),t._v(" "),s("ul",[s("li",[t._v("都是正零 +0")]),t._v(" "),s("li",[t._v("都是负零 -0")]),t._v(" "),s("li",[t._v("都是 NaN")]),t._v(" "),s("li",[t._v("都是除零和 NaN 外的其它同一个数字")])])])]),t._v(" "),s("h2",{attrs:{id:"_0-和-0"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_0-和-0"}},[t._v("#")]),t._v(" +0 和 -0")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 也就是+0")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" \n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Infinity")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -Infinity")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\nObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("is")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])]),s("p",[t._v("当然+0与-0的存在也不是完全没有用处，我们有时会用符号位存储一些信息，比较向量或速度的方向信息,如速度-0,负号代表着运动的方向，保留了负号位可以防止这些信息的丢失。")]),t._v(" "),s("h2",{attrs:{id:"q10：for-in-和-for-of-的比较"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#q10：for-in-和-for-of-的比较"}},[t._v("#")]),t._v(" Q10：for...in 和 for...of 的比较")]),t._v(" "),s("p",[t._v("for...in的缺点")]),t._v(" "),s("ul",[s("li",[t._v("数组的键名是数字，但是for...in循环是以字符串作为键名“0”、“1”、“2”等等。")]),t._v(" "),s("li",[t._v("for...in循环不仅遍历数字键名，还会遍历手动添加的其他键，甚至包括原型链上的键。")]),t._v(" "),s("li",[t._v("某些情况下，for...in循环会以任意顺序遍历键名。")]),t._v(" "),s("li",[t._v("for...in循环主要是为遍历对象而设计的，不适用于遍历数组。")])]),t._v(" "),s("p",[t._v("for...of的优点")]),t._v(" "),s("ul",[s("li",[t._v("有着同for...in一样的简洁语法，但是没有for...in那些缺点，可以遍历数组和各种数据结构。")]),t._v(" "),s("li",[t._v("提供了遍历所有数据结构的统一操作接口。")])]),t._v(" "),s("h2",{attrs:{id:"q11：什么是bfc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#q11：什么是bfc"}},[t._v("#")]),t._v(" Q11：什么是BFC ?")]),t._v(" "),s("h3",{attrs:{id:"box"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#box"}},[t._v("#")]),t._v(" Box")]),t._v(" "),s("p",[t._v("是浏览器渲染进程中的 GUI 渲染线程布局的基本单位，DOM 树 + CSSOM 树 会生成一棵 Box 树 (也就是我们所说的 Render Tree)，它表示着当前渲染文档的格式化结构（一种过渡的结构），而根据 DOM 元素的 tag 和他的 CSS display 属性，会产生下面两大类 boxes")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("block-level boxes")]),t._v(" "),s("p",[t._v("属性为 block, flex, grid, table 的元素，会生成 block-level box")])]),t._v(" "),s("li",[s("p",[t._v("inline-level boxes")]),t._v(" "),s("p",[t._v("display 属性为 inline, inline-block, inline-flex, inline-grid, inline-table 的元素，会生成 inline-level box")])])]),t._v(" "),s("p",[t._v("这两个大类下还有许多小类比如")]),t._v(" "),s("ol",[s("li",[t._v("block box")]),t._v(" "),s("li",[t._v("block container box")]),t._v(" "),s("li",[t._v("inline box")]),t._v(" "),s("li",[t._v("flex container box")]),t._v(" "),s("li",[t._v("grid container box")]),t._v(" "),s("li",[t._v("table wrapper box containing table grid box")])]),t._v(" "),s("h3",{attrs:{id:"格式化上下文"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#格式化上下文"}},[t._v("#")]),t._v(" 格式化上下文")]),t._v(" "),s("p",[t._v("格式化上下文 Formatting Context 是一种布局规则，它决定了一个 box 内部子元素将如何定位，以及和其他元素的关系和相互作用")]),t._v(" "),s("blockquote",[s("p",[t._v("a flex formatting context lays out boxes according to the flex layout rules, whereas a block formatting context lays out boxes according to the block-and-inline layout rules (也就是我们所说的正常流，另外两种是浮动和定位)")])]),t._v(" "),s("p",[t._v("一个 box 要么创建新的格式化上下文，也么继承外部的格式化上下文")]),t._v(" "),s("p",[t._v("当一个 box 建立一个独立的格式化上下文（无论该格式化上下文与它的父级是否具有相同的类型）时，它实际上会创建一个新的独立的布局环境：除了通过调整框本身的大小之外，其后代的布局是（通常）不受框外格式化上下文的规则和内容的影响，反之亦然。")]),t._v(" "),s("h3",{attrs:{id:"bfc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bfc"}},[t._v("#")]),t._v(" BFC")]),t._v(" "),s("p",[t._v("下列方式会为 box 内部创建块格式化上下文：")]),t._v(" "),s("ol",[s("li",[t._v("根元素")]),t._v(" "),s("li",[t._v("浮动元素（元素的 float 不是 none）")]),t._v(" "),s("li",[t._v("绝对定位元素（元素的 position 为 absolute 或 fixed）")]),t._v(" "),s("li",[t._v("overflow 值不为 visible 的块元素")]),t._v(" "),s("li",[t._v("display 值为 flow-root 的元素")]),t._v(" "),s("li",[t._v("行内块元素（元素的 display 为 inline-block）")]),t._v(" "),s("li",[t._v("表格单元格（元素的 display为 table-cell，HTML表格单元格默认为该值）")]),t._v(" "),s("li",[t._v("表格标题（元素的 display 为 table-caption，HTML表格标题默认为该值）")]),t._v(" "),s("li",[t._v("弹性元素（display为 flex 或 inline-flex 元素的直接子元素，也就是 flex-items）")]),t._v(" "),s("li",[t._v("网格元素（display为 grid 或 inline-grid 元素的直接子元素，也就是 grid-items）")])]),t._v(" "),s("p",[t._v("BFC布局规范:")]),t._v(" "),s("ol",[s("li",[t._v("内部的 box 会在垂直方向，一个接一个地放置，参照正常文档流")]),t._v(" "),s("li",[t._v("属于同一个 BFC 的两个相邻 box 的 margin 会发生重叠（外边距重叠）")]),t._v(" "),s("li",[t._v("BFC 的区域不会与浮动元素重叠，计算 BFC 的高度时，浮动元素也参与计算")]),t._v(" "),s("li",[t._v("BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素的布局，反之也如此")])]),t._v(" "),s("p",[t._v("BFC解决的问题：")]),t._v(" "),s("ol",[s("li",[t._v("解决浮动塌陷")]),t._v(" "),s("li",[t._v("解决外边距重叠")])]),t._v(" "),s("h2",{attrs:{id:"q12-谈谈-react-新的生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#q12-谈谈-react-新的生命周期"}},[t._v("#")]),t._v(" Q12: 谈谈 React 新的生命周期")]),t._v(" "),s("p",[t._v("在 componentWillReceiveProps(prevProps, nextProps) 中根据 props 更新 state 并不是一个最好的方案，它可能会包含一些副作用。")]),t._v(" "),s("p",[t._v("getDerivedStateFromProps(props, state) 禁止访问 this.props，强制指定 props 只能和 state 进行比对，可以说是为 setState 而创建的，而那些需要 this.props 做的事则通过 componentDidUpdate 来做")]),t._v(" "),s("p",[t._v("getDerivedStateFromProps 不仅在 props 变化的时候触发，而是在每次 render（ state 和 props 更新）时就会触发")]),t._v(" "),s("p",[t._v("getSnapshotBeforeUpdate(prevProps, prevState) 必须和 componentDidUpdate 一起使用，必须有返回值，返回值将作为第三个参数传递给 componentDidUpdate，主要是为了方便对更新前的 DOM 做一次快照，然后在更新后进行对比再执行一些逻辑")]),t._v(" "),s("h2",{attrs:{id:"q13-let-var-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#q13-let-var-的区别"}},[t._v("#")]),t._v(" Q13: let var 的区别")]),t._v(" "),s("h3",{attrs:{id:"区别1：初始化-变量提升-与暂时性死区"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#区别1：初始化-变量提升-与暂时性死区"}},[t._v("#")]),t._v(" 区别1：初始化(变量提升)与暂时性死区")]),t._v(" "),s("p",[t._v("当解析器将代码转换为AST的时候，变量就会在一个词法作用域下完成声明，let/const 还会检查该词法作用域下有无同名的变量，有的话则报语法错误")]),t._v(" "),s("p",[t._v("当函数真正执行的时候，也就是执行上下文初始化的时候，var 声明的变量也会初始化 (分配内存 + 赋值undefined)，函数声明则会直接初始化 + 赋值，而 let 声明的变量则要到执行的那一行的时候才会初始化，如果那一行是赋值操作，则初始化+赋值同时进行，所以 let 声明的变量之所以出现暂时性死区，是因为它还未完成初始化。const 同理。")]),t._v(" "),s("h3",{attrs:{id:"区别2：挂钩顶层对象属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#区别2：挂钩顶层对象属性"}},[t._v("#")]),t._v(" 区别2：挂钩顶层对象属性")]),t._v(" "),s("p",[t._v("顶层对象的属性(window)与全局变量挂钩，被认为是 JavaScript 语言最大的设计败笔之一。")]),t._v(" "),s("p",[t._v("在全局环境下，var 和 function 声明的变量都会挂载到顶层对象(window)上，而 ES6 中的 let const class 则不会")]),t._v(" "),s("h3",{attrs:{id:"区别3：块级作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#区别3：块级作用域"}},[t._v("#")]),t._v(" 区别3：块级作用域")]),t._v(" "),s("p",[t._v("ES5 规定，函数只能在顶层作用域和函数作用域之中声明，不能在块级作用域声明。")]),t._v(" "),s("p",[t._v("ES6 引入了块级作用域，明确允许在块级作用域之中声明函数。ES6 规定，块级作用域之中，函数声明语句的行为类似于let，在块级作用域之外不可引用。")]),t._v(" "),s("h2",{attrs:{id:"q14-箭头函数的特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#q14-箭头函数的特性"}},[t._v("#")]),t._v(" Q14: 箭头函数的特性")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("箭头函数不会创建自己的this，它只会从自己的作用域链的上一层继承this。箭头函数表达式对非方法函数是最合适的，如果作为一个对象的方法则需要考虑一下 this 指向的问题")])]),t._v(" "),s("li",[s("p",[t._v("由于箭头函数没有自己的 this 指针，通过 call() 或 apply() 方法调用一个函数时，只能传递参数而不能绑定 this，他们的第一个参数会被忽略")])]),t._v(" "),s("li",[s("p",[t._v("箭头函数没有 Arguments 对象，在大多数情况下，使用剩余参数是相较使用arguments对象的更好选择")])]),t._v(" "),s("li",[s("p",[t._v("箭头函数不能用作构造器，和 new一起用会抛出错误（xxx is not a constructor）。因为它没办法正常的调用 call() 或 apply()，而且没有 prototype 属性")])]),t._v(" "),s("li",[s("p",[t._v("yield 关键字通常不能在箭头函数中使用（除非是嵌套在允许使用的函数内）。因此，箭头函数不能用作函数生成器。")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);