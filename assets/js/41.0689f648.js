(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{238:function(t,a,s){"use strict";s.r(a);var e=s(0),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"前端性能优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前端性能优化"}},[t._v("#")]),t._v(" 前端性能优化")]),t._v(" "),s("h2",{attrs:{id:"一、缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、缓存"}},[t._v("#")]),t._v(" 一、缓存")]),t._v(" "),s("h3",{attrs:{id:"_1-service-worker-和-cache-api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-service-worker-和-cache-api"}},[t._v("#")]),t._v(" 1. Service Worker 和 Cache API")]),t._v(" "),s("p",[t._v("首先，我们可能会碰到 Cache API (ServiceWorkerGlobalScope.caches) 里的缓存，提到它就不得不提一下 Service Worker 了")]),t._v(" "),s("p",[t._v("首先明确一下，这层的缓存没有规定说该缓存什么、什么情况下需要缓存，它只是提供给了客户端构建请求缓存机制的能力。如果你对 PWA 或者 Service Worker 很了解，应该非常清楚是怎么一回事。如果不了解也没有关系，我们可以简单看一下：")]),t._v(" "),s("p",[t._v("首先，Service Worker 是一个后台运行的独立线程，可以在代码中启用")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// index.js")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'serviceWorker'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" navigator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    navigator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("serviceWorker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("register")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./sw.js'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注册成功")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("之后需要处理一些 Service Worker 的生命周期事件，而其中与这里提到的缓存功能直接相关的则是请求拦截：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// sw.js")]),t._v("\nself"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fetch'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果有cache则直接返回，否则通过fetch请求")]),t._v("\n    e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("respondWith")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        caches"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("cache")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" cache "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("catch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("以上代码会拦截所有的网络请求，查看是否有缓存的请求内容，如果有则返回缓存，否则会继续发送请求。与内存缓存不同，Cache API 提供的缓存可以认为是“永久性”的，关闭浏览器或离开页面之后，下次再访问仍然可以使用。")]),t._v(" "),s("h3",{attrs:{id:"_2-强缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-强缓存"}},[t._v("#")]),t._v(" 2. 强缓存")]),t._v(" "),s("ol",[s("li",[t._v("内存缓存 Memory Cache")])]),t._v(" "),s("p",[t._v("当你访问一个页面及其子资源时，有时候会出现一个资源被使用多次，例如图标。由于该资源已经存储在内存中，再去请求反而多此一举，浏览器内存则是最近、最快的响应场所。内存缓存并无明确的标准规定，它与 HTTP 语义下的缓存关联性不大，算是浏览器帮我们实现的优化，很多时候其实我们意识不到。")]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("磁盘缓存 Disk Cache")])]),t._v(" "),s("p",[t._v("Disk Cache 也就是存储在硬盘中的缓存，读取速度慢点，但是什么都能存储到磁盘中，比之 Memory Cache 胜在容量和存储时效性上。")]),t._v(" "),s("p",[t._v("在所有浏览器缓存中，Disk Cache 覆盖面基本是最大的。它会根据 HTTP Herder 中的字段判断哪些资源需要缓存，哪些资源可以不请求直接使用，哪些资源已经过期需要重新请求。并且即使在跨站点的情况下，相同地址的资源一旦被硬盘缓存下来，就不会再次去请求数据。绝大部分的缓存都来自 Disk Cache，关于 HTTP 的协议头中的缓存字段，我们会在下文进行详细介绍。")]),t._v(" "),s("h3",{attrs:{id:"_3-push-cache"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-push-cache"}},[t._v("#")]),t._v(" 3. Push Cache")]),t._v(" "),s("p",[t._v("Push Cache 其实是 HTTP/2 的 Push 功能所带来的。简言之，过去一个 HTTP 的请求连接只能传输一个资源，而现在你在请求一个资源的同时，服务端可以为你“推送”一些其他资源 —— 你可能在在不久的将来就会用到一些资源。例如，你在请求 www.sample.com 时，服务端不仅发送了页面文档，还一起推送了 关键 CSS 样式表。这也就避免了浏览器收到响应、解析到相应位置时才会请求所带来的延后。")]),t._v(" "),s("h3",{attrs:{id:"_4-协商缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-协商缓存"}},[t._v("#")]),t._v(" 4. 协商缓存")]),t._v(" "),s("p",[t._v("如果以上三种缓存都没有命中的话，那么只能发起请求来获取资源了。")]),t._v(" "),s("p",[t._v("浏览器会自动往 request header 中添加 If-None-Match 或者 If-Modified-Since 字段，服务器则根据资源的 ETag 与 Last-Modified 判断是否命中协商缓存。是的话，返回304，否的话，返回新的资源和新的缓存信息。")]),t._v(" "),s("h2",{attrs:{id:"二、网络优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、网络优化"}},[t._v("#")]),t._v(" 二、网络优化")]),t._v(" "),s("h3",{attrs:{id:"_1-dns-预解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-dns-预解析"}},[t._v("#")]),t._v(" 1. DNS 预解析")]),t._v(" "),s("p",[t._v("DNS 解析流程可能会很长，耗时很高，所以整个 DNS 服务，包括客户端都会有缓存机制")]),t._v(" "),s("p",[t._v("DNS Prefetch 就是浏览器提供给我们的一个 API。它是 Resource Hint 的一部分。它可以告诉浏览器：过会我就可能要去 yourwebsite.com 上下载一个资源啦，帮我先解析一下域名吧。这样之后用户点击某个按钮，触发了 yourwebsite.com 域名下的远程请求时，就略去了 DNS 解析的步骤。使用方式很简单：")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("link")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("rel")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("dns-prefetch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("href")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("//yourwebsite.com"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("h3",{attrs:{id:"_2-预先建立连接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-预先建立连接"}},[t._v("#")]),t._v(" 2. 预先建立连接")]),t._v(" "),s("p",[t._v("我们知道，建立连接不仅需要 DNS 查询，还需要进行 TCP 协议握手，有些还会有 TLS/SSL 协议，这些都会导致连接的耗时。使用 Preconnect 可以帮助你告诉浏览器：“我有一些资源会用到某个源（origin），你可以帮我预先建立连接。”")]),t._v(" "),s("p",[t._v("根据规范，当你使用 Preconnect 时，浏览器大致做了如下处理：")]),t._v(" "),s("ul",[s("li",[t._v("首先，解析 Preconnect 的 url；")]),t._v(" "),s("li",[t._v("其次，根据当前 link 元素中的属性进行 cors 的设置；")]),t._v(" "),s("li",[t._v("然后，默认先将 credential 设为 true，如果 cors 为 Anonymous 并且存在跨域，则将 credential 置为 false；")]),t._v(" "),s("li",[t._v("最后，进行连接。\n使用 Preconnect 只需要将 rel 属性设为 preconnect 即可：")])]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("link")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("rel")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("preconnect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("href")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("//sample.com"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("h3",{attrs:{id:"_3-使用-cdn"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-使用-cdn"}},[t._v("#")]),t._v(" 3. 使用 CDN")]),t._v(" "),s("p",[t._v("当我们实际把网络包发向我们的目标地址时，肯定希望越快到达目的地越好（对应的，也会希望越快获得响应）。而网络传输是有极限的，同样一个北京的用户，访问北京的服务器显然要比广州快很多。同时，服务的负载也会影响响应的速度。")]),t._v(" "),s("p",[t._v("对于静态资源，我们可以考虑通过 CDN 来降低时延。")]),t._v(" "),s("p",[t._v("对于使用 CDN 的资源，DNS 解析会将 CDN 资源的域名解析到 CDN 服务的负载均衡器上，负载均衡器可以通过请求的信息获取用户对应的地理区域，从而通过负载均衡算法，在背后的诸多服务器中，综合选择一台地理位置近、负载低的机器来提供服务。例如为北京联通用户解析北京的服务器 IP。这样，用户在之后访问 CDN 资源时都是访问北京服务器，距离近，速度快。")]),t._v(" "),s("p",[t._v("CDN 原理：")]),t._v(" "),s("ol",[s("li",[t._v("当用户点击网站页面上的内容URL，经过本地DNS系统解析，DNS系统会最终将域名的解析权交给CNAME指向的CDN专用DNS服务器（需要先将自己网站的域名解析到加速后的 CNAME，也就是让 CDN 服务器代理自己的网站）。")]),t._v(" "),s("li",[t._v("CDN的DNS服务器将CDN的全局负载均衡设备IP地址返回用户。")]),t._v(" "),s("li",[t._v("用户向CDN的全局负载均衡设备发起内容URL访问请求。")]),t._v(" "),s("li",[t._v("CDN全局负载均衡设备根据用户IP地址，以及用户请求的内容URL，选择一台用户所属区域的区域负载均衡设备，告诉用户向这台设备发起请求。")]),t._v(" "),s("li",[t._v("区域负载均衡设备会为用户选择一台合适的缓存服务器提供服务，选择的依据包括：根据用户IP地址，判断哪一台服务器距用户最近；根据用户所请求的URL中携带的内容名称，判断哪一台服务器上有用户所需内容；查询各个服务器当前的负载情况，判断哪一台服务器尚有服务能力。基于以上这些条件的综合分析之后，区域负载均衡设备会向全局负载均衡设备返回一台缓存服务器的IP地址。")]),t._v(" "),s("li",[t._v("全局负载均衡设备把服务器的IP地址返回给用户。")]),t._v(" "),s("li",[t._v("用户向缓存服务器发起请求，缓存服务器响应用户请求，将用户所需内容传送到用户终端。如果这台缓存服务器上并没有用户想要的内容，而区域均衡设备依然将它分配给了用户，那么这台服务器就要向它的上一级缓存服务器请求内容，直至追溯到网站的源服务器将内容拉到本地。")])]),t._v(" "),s("h3",{attrs:{id:"_4-bff-聚合接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-bff-聚合接口"}},[t._v("#")]),t._v(" 4. BFF 聚合接口")]),t._v(" "),s("p",[t._v("BFF 非常合适做的一件事就是后端服务的聚合。")]),t._v(" "),s("p",[t._v("如果你有一个两个接口服务：第一个服务是先获取产品信息，再根据产品信息中的上架时间通过第二个服务获取该时间后的产品列表。这个业务逻辑如果放在前端（浏览器）处理将会串行发送两个请求。假设每个请求 200ms，那么就需要等待 400ms。如果引入 NodeJS，这一层可以放在 NodeJS 中实现。NodeJS 部署的位置一般离其他后端服务“更近”，例如同一个局域网。这类服务间的请求耗时显然更低，可能只需要 200(浏览器) + 30(NodeJS) * 2 = 260ms。")]),t._v(" "),s("p",[t._v("此外，如果一个业务需要在前端并发三、四个请求来获取完整数据，那么放在 NodeJS 的 BFF 层也是一个不错的选择。")]),t._v(" "),s("h3",{attrs:{id:"_5-避免过多的重定向"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-避免过多的重定向"}},[t._v("#")]),t._v(" 5. 避免过多的重定向")]),t._v(" "),s("p",[t._v("无谓的重定向会增加请求耗时。")]),t._v(" "),s("h2",{attrs:{id:"三、静态资源加载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、静态资源加载"}},[t._v("#")]),t._v(" 三、静态资源加载")]),t._v(" "),s("h3",{attrs:{id:"_1-压缩"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-压缩"}},[t._v("#")]),t._v(" 1. 压缩")]),t._v(" "),s("p",[t._v("启用gzip压缩。")]),t._v(" "),s("h3",{attrs:{id:"_2-合并请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-合并请求"}},[t._v("#")]),t._v(" 2. 合并请求")]),t._v(" "),s("p",[t._v("对与体积小的零碎的资源文件，可以合并成大的资源文件，减少请求的数量。比如雪碧图。")]),t._v(" "),s("h3",{attrs:{id:"_3-代码分割"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-代码分割"}},[t._v("#")]),t._v(" 3. 代码分割")]),t._v(" "),s("p",[t._v("如果是SPA且bundle体积过大的话可以进行代码分割按需加载（异步加载模块）。")]),t._v(" "),s("h3",{attrs:{id:"_4-懒加载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-懒加载"}},[t._v("#")]),t._v(" 4. 懒加载")]),t._v(" "),s("p",[t._v("对于初始渲染用不到的资源文件，可以延迟加载。")]),t._v(" "),s("h3",{attrs:{id:"_5-预加载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-预加载"}},[t._v("#")]),t._v(" 5. 预加载")]),t._v(" "),s("p",[t._v("预加载相当于是快用户一步，在空闲的时候就把用户即将用到的资源加载完，等用户实际需要使用时，资源已经存在在本地，自然就跳过了整个加载的等待时间。")]),t._v(" "),s("ul",[s("li",[s("h4",{attrs:{id:"prefetch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#prefetch"}},[t._v("#")]),t._v(" prefetch")]),t._v(" "),s("p",[t._v("你可以把 Prefetch 理解为资源预获取。一般来说，可以用 Prefetch 来指定在紧接着之后的操作或浏览中需要使用到的资源，让浏览器提前获取。由于仅仅是提前获取资源，因此浏览器不会对资源进行预处理，并且像 CSS 样式表、JavaScript 脚本这样的资源是不会自动执行并应用于当前文档的。其中 as 属性用于指定资源的类型，与 Preload 规范一致，基本涵盖了所有资源类型")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("link")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("rel")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("prefetch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("href")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("/prefetch.js"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("as")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("script"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])])]),t._v(" "),s("li",[s("h4",{attrs:{id:"preload"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#preload"}},[t._v("#")]),t._v(" Preload")]),t._v(" "),s("p",[t._v("在遇到需要 Preload 的资源时，浏览器会 立刻 进行预获取，并将结果放在内存中，资源的获取不会影响页面 parse 与 load 事件的触发。直到再次遇到该资源的使用标签时，才会执行。由于我们会将 "),s("code",[t._v("<script>")]),t._v(" 标签置于 "),s("code",[t._v("<body>")]),t._v(" 底部来保证性能，因此可以考虑在 "),s("code",[t._v("<head>")]),t._v(" 标签中适当添加这些资源的 Preload 来加速页面的加载与渲染。")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("link")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("rel")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("preload"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("href")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("./nextpage.js"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("as")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("script"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("p",[t._v("与 Prefetch 相比，Preload 会强制浏览器立即获取资源，并且该请求具有较高的优先级（mandatory and high-priority），因此建议对一些当前页面会马上用到资源使用 Preload；相对的，Prefetch 的资源获取则是可选与较低优先级的，其是否获取完全取决于浏览器的决定，适用于预获取将来可能会用到的资源。")])]),t._v(" "),s("li",[s("h4",{attrs:{id:"prerender"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#prerender"}},[t._v("#")]),t._v(" Prerender")]),t._v(" "),s("p",[t._v("Prerender 比 Prefetch 更进一步，可以粗略地理解不仅会预获取，还会预执行。")]),t._v(" "),s("p",[t._v("如果你指定 Prerender 一个页面，那么它依赖的其他资源，像 "),s("code",[t._v("<script>")]),t._v("、"),s("code",[t._v("<link>")]),t._v(" 等页面所需资源也可能会被下载与处理。但是预处理会基于当前机器、网络情况的不同而被不同程度地推迟。例如，会根据 CPU、GPU 和内存的使用情况，以及请求操作的幂等性而选择不同的策略或阻止该操作。")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("link")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("rel")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("prerender"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("href")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("//sample.com/nextpage.html"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])])])]),t._v(" "),s("h3",{attrs:{id:"_6-把css放到顶部"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-把css放到顶部"}},[t._v("#")]),t._v(" 6. 把CSS放到顶部")]),t._v(" "),s("p",[t._v("网页上的资源加载时从上网下顺序加载的，所以css放在页面的顶部能够优先渲染页面，让用户感觉页面加载很快。")]),t._v(" "),s("h3",{attrs:{id:"_7-把js放到底部"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-把js放到底部"}},[t._v("#")]),t._v(" 7. 把JS放到底部")]),t._v(" "),s("p",[t._v("加载js时会对后续的资源造成阻塞，必须得等js加载完才去加载后续的文件 ，所以就把js放在页面底部最后加载。")]),t._v(" "),s("h3",{attrs:{id:"_8-使用无cookie的域，分散域名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-使用无cookie的域，分散域名"}},[t._v("#")]),t._v(" 8. 使用无cookie的域，分散域名")]),t._v(" "),s("p",[t._v("比如CSS、js、图片等，客户端请求静态文件的时候，减少了 Cookie 的反复传输对主域名的影响。而且分散域名可以在 HTTP/1.1 下更快的加载，因为浏览器对"),s("strong",[t._v("向同一个域名建立的TCP连接")]),t._v("有最大数量的限制，chrome 为6个")]),t._v(" "),s("h2",{attrs:{id:"四、运行中优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、运行中优化"}},[t._v("#")]),t._v(" 四、运行中优化")]),t._v(" "),s("h3",{attrs:{id:"_1-耗时js计算放入web-worker中"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-耗时js计算放入web-worker中"}},[t._v("#")]),t._v(" 1. 耗时JS计算放入web worker中")]),t._v(" "),s("p",[t._v("web worker 是渲染进程中JS引擎线程之外的新的线程，不会像JS引擎线程一样造成 GUI 渲染线程的阻塞。")]),t._v(" "),s("h3",{attrs:{id:"_2-使用-requestanimationframe-生成动画"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-使用-requestanimationframe-生成动画"}},[t._v("#")]),t._v(" 2. 使用 requestAnimationFrame 生成动画")]),t._v(" "),s("p",[t._v("requestAnimationFrame 中的回调在浏览器下一帧渲染之前调用，丝滑~")]),t._v(" "),s("h3",{attrs:{id:"_3-避免回流和重绘"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-避免回流和重绘"}},[t._v("#")]),t._v(" 3. 避免回流和重绘")]),t._v(" "),s("p",[t._v("CSS方面：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("避免使用table布局，在布局完全建立之前，table需要很多关口，table是可以影响之前已经进入的DOM元素的显示的元素。即使一些小的变化和会导致table中所有其他节点回流。")])]),t._v(" "),s("li",[s("p",[t._v("尽可能在DOM树的最末端改变class")])]),t._v(" "),s("li",[s("p",[t._v("将动画效果应用到position属性为absolute或fixed的元素上（脱离文档流以避免父元素及相邻元素的回流）")])]),t._v(" "),s("li",[s("p",[t._v("避免使用CSS表达式（例如：calc()）")])]),t._v(" "),s("li",[s("p",[t._v("提升至合成层")])])]),t._v(" "),s("p",[t._v("JS方面")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("合并你所有可能触发回流的操作（包括操作DOM，添加class，修改style）")])]),t._v(" "),s("li",[s("p",[t._v("避免频繁调用会引发回流的API(如 getBoundingClientRect )，可以用一个变量缓存起来")])])]),t._v(" "),s("h3",{attrs:{id:"_4-使用防抖和节流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-使用防抖和节流"}},[t._v("#")]),t._v(" 4. 使用防抖和节流")]),t._v(" "),s("p",[t._v("详见 节流和防抖 一节")]),t._v(" "),s("h3",{attrs:{id:"_5-使用事件委托"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-使用事件委托"}},[t._v("#")]),t._v(" 5. 使用事件委托")]),t._v(" "),s("p",[t._v("事件委托的好处多多")]),t._v(" "),s("ul",[s("li",[t._v("首先可以监听后插入的子元素的事件")]),t._v(" "),s("li",[t._v("其次移除事件非常方便，写起来也很简洁，性能也更优秀")])]),t._v(" "),s("h3",{attrs:{id:"_6-缓存dom引用，批量操作，"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-缓存dom引用，批量操作，"}},[t._v("#")]),t._v(" 6. 缓存DOM引用，批量操作，")]),t._v(" "),s("p",[t._v("但也不要同一时间大量操作DOM，司徒正妹测试过: 同时插入1w条列表项不如间隔几ms每次插入100个，要给浏览器喘息的时间。")]),t._v(" "),s("h3",{attrs:{id:"_7-开启-gpu-加速"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-开启-gpu-加速"}},[t._v("#")]),t._v(" 7. 开启 GPU 加速")]),t._v(" "),s("p",[t._v("实际就是将"),s("strong",[t._v("渲染层")]),t._v("提升为"),s("strong",[t._v("合成层")]),t._v("，详见 浏览器渲染原理 一节")]),t._v(" "),s("h2",{attrs:{id:"五、首屏优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、首屏优化"}},[t._v("#")]),t._v(" 五、首屏优化")]),t._v(" "),s("h3",{attrs:{id:"_1-预渲染"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-预渲染"}},[t._v("#")]),t._v(" 1. 预渲染")]),t._v(" "),s("h3",{attrs:{id:"_2-加入骨架屏"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-加入骨架屏"}},[t._v("#")]),t._v(" 2. 加入骨架屏")]),t._v(" "),s("h3",{attrs:{id:"_3-放大招，服务端渲染（ssr）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-放大招，服务端渲染（ssr）"}},[t._v("#")]),t._v(" 3. 放大招，服务端渲染（SSR）")])])}),[],!1,null,null,null);a.default=n.exports}}]);