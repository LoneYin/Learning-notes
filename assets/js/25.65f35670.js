(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{225:function(t,s,a){"use strict";a.r(s);var n=a(0),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"作用域与闭包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用域与闭包"}},[t._v("#")]),t._v(" 作用域与闭包")]),t._v(" "),a("h2",{attrs:{id:"作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用域"}},[t._v("#")]),t._v(" 作用域")]),t._v(" "),a("h3",{attrs:{id:"什么是作用域？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是作用域？"}},[t._v("#")]),t._v(" 什么是作用域？")]),t._v(" "),a("p",[t._v("ES3 中的作用域：")]),t._v(" "),a("p",[t._v("作用域就是一套规则，用于确定在何处以及如何查找变量（标识符）的规则，在 JS 引擎中，作用域会在相应的执行上下文中的变量对象(可以看做真正存储变量的地方)中查找变量值。")]),t._v(" "),a("p",[t._v("ES5 后的作用域：")]),t._v(" "),a("p",[t._v("词法环境和该环境下的环境记录。")]),t._v(" "),a("h3",{attrs:{id:"什么是词法作用域？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是词法作用域？"}},[t._v("#")]),t._v(" 什么是词法作用域？")]),t._v(" "),a("p",[t._v("词法作用域是作用域的一种工作模型，作用域是由书写代码时函数声明的位置来决定")]),t._v(" "),a("h3",{attrs:{id:"js中作用域的种类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js中作用域的种类"}},[t._v("#")]),t._v(" JS中作用域的种类")]),t._v(" "),a("p",[t._v("以下种类基于 Chrome 内函数 "),a("code",[t._v("[[scope]]")]),t._v(" 私有属性的实现。")]),t._v(" "),a("ol",[a("li",[t._v("全局作用域 Global (用于访问全局执行上下文中的全局变量对象)")]),t._v(" "),a("li",[t._v("顶级作用域 Script  (一段可执行脚本的作用域，const let class 在 Script 中声明的变量不会挂载到 Global 中，而 var function 则会)，顶级作用域也会自动添加到其他函数或模块的作用域链中，多个 Script 作用域会发生合并。")]),t._v(" "),a("li",[t._v("模块作用域 Module  (一个可执行模块的作用域，内部声明的变量统统不会挂载到 Global 中)")]),t._v(" "),a("li",[t._v("函数作用域 Scope  (一个函数内部自己的作用域，用于访问一个函数执行上下文中存储变量的的变量对象)")]),t._v(" "),a("li",[t._v("闭包作用域 Closure  (一个函数执行结束之后，它的 Scope 会被销毁，但是如果有子函数访问了该 Scope 下的某些变量，那么这些变量就会形成一个 Closure 作用域，而不会被 GC 回收)")]),t._v(" "),a("li",[t._v("块级作用域 Block  (ES6 新增的作用域类型，在 for 或者 if 或者 try/catch 代码块内会生成，也就是 {} 中的代码)")])]),t._v(" "),a("h3",{attrs:{id:"作用域链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用域链"}},[t._v("#")]),t._v(" 作用域链")]),t._v(" "),a("p",[t._v("函数内部所能访问到的所有作用域组成了作用域链（由内到外），它是一个变量对象的集合。具体可以查看一个函数的 "),a("code",[t._v("[[Scopes]]")]),t._v(" 属性。")]),t._v(" "),a("h2",{attrs:{id:"闭包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[t._v("#")]),t._v(" 闭包")]),t._v(" "),a("p",[t._v("从技术的角度讲，所有的JavaScript函数都是闭包。")]),t._v(" "),a("p",[t._v("JavaScript是一门词法作用域的语言，而闭包正是词法作用域的提现。")]),t._v(" "),a("p",[t._v("因为闭包的定义就是："),a("strong",[t._v("那些能够访问自由变量的函数。")])]),t._v(" "),a("p",[t._v("那什么是自由变量呢："),a("strong",[t._v("自由变量是指在函数中使用的，但既不是函数参数也不是函数的局部变量的变量。(也就是作用域链中该函数执行上下文的活动对象AO之外的作用域中的变量)")])]),t._v(" "),a("p",[t._v("因为无论我们执行任何函数，作用域链中都会包含全局作用域 Global，即我们可以访问全局变量对象(GlobalContext.VO)，全局变量就是我们能访问到的自由变量，此时就产生了闭包。")]),t._v(" "),a("p",[t._v("在这里复习一下一个执行上下文（ExecutionContext）都由什么组成：")]),t._v(" "),a("ol",[a("li",[t._v("变量对象(Variable Object，VO)")]),t._v(" "),a("li",[t._v("作用域链(Scopes Chain)")]),t._v(" "),a("li",[t._v("this (浏览器中全局上下文(GlobalContext)的this即window)")])]),t._v(" "),a("p",[t._v("举个例子:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("foo 函数可以访问变量 a，但是 a 既不是 foo 函数的局部变量，也不是 foo 函数的参数，所以 a 就是自由变量。所以函数 foo + 自由变量 a 就组成了一个闭包")]),t._v(" "),a("p",[t._v("因为作用域链的存在，即使外部函数已经执行完毕，外部的 Scope 即使被销毁，但是内部函数依然可以保持对外部 Scope 的访问，因为在确定词法作用域的时候，外部的 scope 已经留有一份在内部函数中(生成了 Closure 作用域)。")]),t._v(" "),a("p",[t._v("总结一下，我们实践中的闭包应该是如下两种情况：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("即使创建函数的上下文已经销毁，该函数仍然存在（比如，内部函数从父函数中返回，或者赋值给了外部变量，在其定义环境之外运行）")])]),t._v(" "),a("li",[a("p",[t._v("在函数内代码中引用了自由变量")])])]),t._v(" "),a("p",[a("strong",[t._v("注意：每个闭包保存的外部环境变量是相互独立的，因为生成该闭包后父作用域就会被销毁（推出执行栈），生成下个闭包的时候又是全新的作用域（新的执行上下文）")])]),t._v(" "),a("p",[t._v("举个例子")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" o "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    o"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n    i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" bar\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" m "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("m")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2 2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("m")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3 3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2 2")]),t._v("\n")])])]),a("p",[t._v("m 和 n 中的 o 就是两个不同的对象，i 也是不同的")])])}),[],!1,null,null,null);s.default=r.exports}}]);